# Variables
export LOG := "DEBUG"

target := "riscv64gc-unknown-none-elf"
mode := "release"
mode_arg := "--" + mode

kernel_elf := "target" / target / mode / "os"
kernel_bin := kernel_elf + ".bin"
disasm_tmp := kernel_elf + ".asm"

board := "qemu"
sbi := "rustsbi"
bootloader := "../bootloader" / sbi + "-" + board + ".bin"

kernel_entry_pa := "0x80200000"

objdump := "rust-objdump --arch-name=riscv64"
objcopy := "rust-objcopy --binary-architecture=riscv64"

qemu_args := "-machine virt -nographic -bios " + bootloader + " -device loader,file=" + kernel_bin + ",addr=" + kernel_entry_pa

app_dir := "../user/src/bin"
app_target_path := "../user/target" / target / mode

# Default
default:
    just --list

# Environment setup
env:
    rustup target add {{target}}
    cargo install cargo-binutils
    rustup component add rust-src
    rustup component add llvm-tools-preview

insert_app_data:
    #!/usr/bin/env python3
    import os

    apps = os.listdir("{{app_dir}}")
    apps.sort()

    app_index = f"""
        .align 3
        .section .data
        .global _num_app
    _num_app:
        .quad {len(apps)}
    """
    app_data = ""

    for app_id, app in enumerate(apps):
        base = os.path.splitext(app)[0]
        app_index += f"    .quad app_{app_id}_start\n"
        app_data += f"""
        .section .data
        .global app_{app_id}_start
        .global app_{app_id}_end
    app_{app_id}_start:
        .incbin "{{app_target_path}}/{base}.bin"
    app_{app_id}_end:
    """

    app_index += f"    .quad app_{len(apps) - 1}_end\n"

    with open("src/link_app.S", "w") as f:
        f.write(app_index)
        f.write(app_data)

# Build the kernel binary
build: insert_app_data
    @ cd ../user && just build
    @ echo "Platform: {{board}}"
    @ cp "src/linker-{{board}}.ld" "src/linker.ld"
    cargo build {{mode_arg}}
    @ rm src/linker.ld
    {{objcopy}} {{kernel_elf}} --strip-all -O binary {{kernel_bin}}

# Clean build artifacts
clean:
    cargo clean

# Disassemble for inspection using bat
disasm: build
    {{objdump}} -d {{kernel_elf}} | bat -l asm

# Disassemble for inspection using LunarVim
disasm-vim: build
    {{objdump}} -d {{kernel_elf}} > {{disasm_tmp}}
    lvim {{disasm_tmp}}
    rm {{disasm_tmp}}

# Run the kernel in QEMU
run: build
    @ echo "Running QEMU"
    qemu-system-riscv64 {{qemu_args}}

# Debug the kernel in QEMU using tmux
debug: build
    tmux new-session -d "qemu-system-riscv64 {{qemu_args}} -s -S"
    tmux split-window -h "gdb-multiarch -ex 'file {{kernel_elf}}' -ex 'target remote localhost:1234'"
    tmux -2 attach-session -d

# Start a GDB server for debugging
gdbserver: build
    qemu-system-riscv64 {{qemu_args}} -s -S

# Connect to the GDB server
gdbclient:
    gdb-multiarch -ex "file {{kernel_elf}}" -ex "target remote localhost:1234"
