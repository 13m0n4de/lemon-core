# Target architecture
target := "riscv64gc-unknown-none-elf"
mode := "release"

# Paths for kernel binary and disassembly
kernel_elf := "target" / target / mode / "kernel"
kernel_bin := kernel_elf + ".bin"
disasm_tmp := kernel_elf + ".asm"

# Tools for handling object files
objdump := "rust-objdump --arch-name=riscv64"
objcopy := "rust-objcopy --binary-architecture=riscv64"

# List available recipes
default:
    just --list

# Build the kernel binary
build board="qemu":
    @ cp "src/linker-{{board}}.ld" "src/linker.ld"
    cargo build --{{mode}} --features "board_{{board}}"
    @ rm src/linker.ld
    {{objcopy}} {{kernel_elf}} --strip-all -O binary {{kernel_bin}}

# Build the kernel's unit tests binary:
build-test board="qemu":
    #!/usr/bin/env bash
    cp "src/linker-{{board}}.ld" "src/linker.ld"
    kernel_tests_bin=$(cargo test --no-run --{{mode}} --features "board_{{board}}" \
        --message-format json | tail -2 | head -1 | jq -r ".executable")
    rm src/linker.ld
    {{objcopy}} $kernel_tests_bin --strip-all -O binary {{kernel_bin}}

# Clean build artifacts
clean:
    cargo clean

clippy:
    cargo clippy --{{mode}}

# Disassemble for inspection using bat
disasm: build
    {{objdump}} -d {{kernel_elf}} | bat -l asm

# Disassemble for inspection using LunarVim
disasm-vim: build
    {{objdump}} -d {{kernel_elf}} > {{disasm_tmp}}
    lvim {{disasm_tmp}}
    rm {{disasm_tmp}}
